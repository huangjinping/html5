/*
 * Generated by PEG.js 0.10.0.
 *
 * http://pegjs.org/
 */

"use strict";

function peg$subclass(child, parent) {
  function ctor() { this.constructor = child; }
  ctor.prototype = parent.prototype;
  child.prototype = new ctor();
}

function peg$SyntaxError(message, expected, found, location) {
  this.message  = message;
  this.expected = expected;
  this.found    = found;
  this.location = location;
  this.name     = "SyntaxError";

  if (typeof Error.captureStackTrace === "function") {
    Error.captureStackTrace(this, peg$SyntaxError);
  }
}

peg$subclass(peg$SyntaxError, Error);

peg$SyntaxError.buildMessage = function(expected, found) {
  var DESCRIBE_EXPECTATION_FNS = {
        literal: function(expectation) {
          return "\"" + literalEscape(expectation.text) + "\"";
        },

        "class": function(expectation) {
          var escapedParts = "",
              i;

          for (i = 0; i < expectation.parts.length; i++) {
            escapedParts += expectation.parts[i] instanceof Array
              ? classEscape(expectation.parts[i][0]) + "-" + classEscape(expectation.parts[i][1])
              : classEscape(expectation.parts[i]);
          }

          return "[" + (expectation.inverted ? "^" : "") + escapedParts + "]";
        },

        any: function(expectation) {
          return "any character";
        },

        end: function(expectation) {
          return "end of input";
        },

        other: function(expectation) {
          return expectation.description;
        }
      };

  function hex(ch) {
    return ch.charCodeAt(0).toString(16).toUpperCase();
  }

  function literalEscape(s) {
    return s
      .replace(/\\/g, '\\\\')
      .replace(/"/g,  '\\"')
      .replace(/\0/g, '\\0')
      .replace(/\t/g, '\\t')
      .replace(/\n/g, '\\n')
      .replace(/\r/g, '\\r')
      .replace(/[\x00-\x0F]/g,          function(ch) { return '\\x0' + hex(ch); })
      .replace(/[\x10-\x1F\x7F-\x9F]/g, function(ch) { return '\\x'  + hex(ch); });
  }

  function classEscape(s) {
    return s
      .replace(/\\/g, '\\\\')
      .replace(/\]/g, '\\]')
      .replace(/\^/g, '\\^')
      .replace(/-/g,  '\\-')
      .replace(/\0/g, '\\0')
      .replace(/\t/g, '\\t')
      .replace(/\n/g, '\\n')
      .replace(/\r/g, '\\r')
      .replace(/[\x00-\x0F]/g,          function(ch) { return '\\x0' + hex(ch); })
      .replace(/[\x10-\x1F\x7F-\x9F]/g, function(ch) { return '\\x'  + hex(ch); });
  }

  function describeExpectation(expectation) {
    return DESCRIBE_EXPECTATION_FNS[expectation.type](expectation);
  }

  function describeExpected(expected) {
    var descriptions = new Array(expected.length),
        i, j;

    for (i = 0; i < expected.length; i++) {
      descriptions[i] = describeExpectation(expected[i]);
    }

    descriptions.sort();

    if (descriptions.length > 0) {
      for (i = 1, j = 1; i < descriptions.length; i++) {
        if (descriptions[i - 1] !== descriptions[i]) {
          descriptions[j] = descriptions[i];
          j++;
        }
      }
      descriptions.length = j;
    }

    switch (descriptions.length) {
      case 1:
        return descriptions[0];

      case 2:
        return descriptions[0] + " or " + descriptions[1];

      default:
        return descriptions.slice(0, -1).join(", ")
          + ", or "
          + descriptions[descriptions.length - 1];
    }
  }

  function describeFound(found) {
    return found ? "\"" + literalEscape(found) + "\"" : "end of input";
  }

  return "Expected " + describeExpected(expected) + " but " + describeFound(found) + " found.";
};

function peg$parse(input, options) {
  options = options !== void 0 ? options : {};

  var peg$FAILED = {},

      peg$startRuleFunctions = { TypeExpression: peg$parseTypeExpression },
      peg$startRuleFunction  = peg$parseTypeExpression,

      peg$c0 = function(r, unk) {
      		var result = unk;

      		if (r) {
      			result = repeatable(result);
      		}

      		return result;
      	},
      peg$c1 = "?",
      peg$c2 = peg$literalExpectation("?", false),
      peg$c3 = "!",
      peg$c4 = peg$literalExpectation("!", false),
      peg$c5 = function(r, prefix, expr) {
      		var result = expr;

      		if (r) {
      			result = repeatable(result);
      		}

      		return nullable(result, prefix);
      	},
      peg$c6 = function(expr, optionalPre, postfix, optionalPost) {
      		var result = expr;

      		// we only allow one optional operator
      		if (optionalPre && optionalPost) {
      			return null;
      		}

      		// "non-nullable, yet optional" makes no sense, but we allow it
      		result = nullable(result, postfix);

      		if (optionalPre || optionalPost) {
      			result = optional(result);
      		}

      		return result;
      	},
      peg$c7 = function(expr, postfix) {
      		return nullable(expr, postfix);
      	},
      peg$c8 = function(prefix, expr) {
      		prefix = prefix || '';

      		return nullable(expr, prefix);
      	},
      peg$c9 = function(expr, postfix) {
      		postfix = postfix || '';

      		return nullable(expr, postfix);
      	},
      peg$c10 = function(expr) {
      		return repeatable(expr);
      	},
      peg$c11 = function(lit, opt) {
      		var result = lit;

      		if (opt) {
      			result = optional(result);
      		}

      		return result;
      	},
      peg$c12 = function(lit) {
      		return repeatable(lit);
      	},
      peg$c13 = "*",
      peg$c14 = peg$literalExpectation("*", false),
      peg$c15 = function() {
      		return {
      			type: Types.AllLiteral
      		};
      	},
      peg$c16 = function() {
      		return {
      			type: Types.NullLiteral
      		};
      	},
      peg$c17 = function() {
      		return {
      			type: Types.UndefinedLiteral
      		};
      	},
      peg$c18 = "...",
      peg$c19 = peg$literalExpectation("...", false),
      peg$c20 = function() {
      		return {
      			repeatable: true
      		};
      	},
      peg$c21 = "=",
      peg$c22 = peg$literalExpectation("=", false),
      peg$c23 = function() {
      		return {
      			optional: true
      		};
      	},
      peg$c24 = "[]",
      peg$c25 = peg$literalExpectation("[]", false),
      peg$c26 = function(name, brackets) {
      		var result;

      		function nest(obj) {
      			return {
      				type: Types.TypeApplication,
      				expression: {
      					type: Types.NameExpression,
      					name: 'Array'
      				},
      				applications: [obj]
      			};
      		}

      		// we only allow this if JSDoc parsing is enabled
      		if (!options.jsdoc) {
      			return null;
      		}

      		result = nest(name);
      		result.applications[0].type = Types.NameExpression;

      		for (var i = 0, l = brackets.length - 1; i < l; i++) {
      			result = nest(result);
      		}

      		return result;
      	},
      peg$c27 = function(exp, appl, opt) {
      		var result = {};

      		var nameExp = {
      			type: Types.NameExpression,
      			name: exp.name
      		};

      		if (appl && appl.length) {
      			result.type = Types.TypeApplication;
      			result.expression = nameExp;
      			result.applications = appl;
      		} else {
      			result = nameExp;
      		}

      		if (opt) {
      			result = optional(result);
      		}

      		return result;
      	},
      peg$c28 = function(t) {
      		return repeatable(t);
      	},
      peg$c29 = function(exp, opt) {
      		var result = {
      			type: Types.NameExpression,
      			name: exp.name,
      			reservedWord: true
      		};

      		if (opt) {
      			result = optional(result);
      		}

      		return result;
      	},
      peg$c30 = ".",
      peg$c31 = peg$literalExpectation(".", false),
      peg$c32 = "<",
      peg$c33 = peg$literalExpectation("<", false),
      peg$c34 = ">",
      peg$c35 = peg$literalExpectation(">", false),
      peg$c36 = function(sep, l) {
      		return l;
      	},
      peg$c37 = ",",
      peg$c38 = peg$literalExpectation(",", false),
      peg$c39 = function(expr, list) {
      		var result = [expr];
      		for (var i = 0, l = list.length; i < l; i++) {
      			result.push(list[i][3]);
      		}
      		return result;
      	},
      peg$c40 = function() {
      		var result;

      		// we only allow this if JSDoc parsing is enabled
      		if (!options.jsdoc) {
      			return null;
      		}

      		result = {
      			type: Types.TypeApplication,
      			expression: {
      				type: Types.NameExpression,
      				name: 'Array'
      			},
      			applications: [
      				{
      					type: Types.FunctionType,
      					params: []
      				}
      			]
      		};

      		return result;
      	},
      peg$c41 = function(sig, opt) {
      		// signature is required unless JSDoc parsing is enabled
      		if (!sig && !options.jsdoc) {
      			return null;
      		} else if (sig === null) {
      			sig = {
      				params: []
      			};
      		}

      		var result = {
      			type: Types.FunctionType
      		};

      		Object.keys(sig).forEach(function(key) {
      			result[key] = sig[key];
      		});

      		if (opt) {
      			result = optional(result);
      		}

      		return result;
      	},
      peg$c42 = "(",
      peg$c43 = peg$literalExpectation("(", false),
      peg$c44 = ")",
      peg$c45 = peg$literalExpectation(")", false),
      peg$c46 = ":",
      peg$c47 = peg$literalExpectation(":", false),
      peg$c48 = function(sig, returns) {
      		var result = {};

      		result.params = sig ? sig.params : [];
      		if (sig && sig['new']) {
      			result['new'] = sig['new'];
      		}
      		if (sig && sig['this']) {
      			result['this'] = sig['this']
      		}

      		if (returns && returns[3]) {
      			result.result = returns[3];
      		}

      		return result;
      	},
      peg$c49 = function(funcNew, funcThis, params) {
      		var result = {
      			params: params ? params[3] : [],
      			'new': funcNew
      		};
      		if (funcThis) {
      			result['this'] = funcThis[3];
      		}

      		return result;
      	},
      peg$c50 = function(funcThis, funcNew, params) {
      		var result = {
      			params: params ? params[3] : [],
      			'this': funcThis
      		};
      		if (funcNew) {
      			result['new'] = funcNew[3];
      		}

      		return result;
      	},
      peg$c51 = function(params) {
      		return {
      			params: params
      		};
      	},
      peg$c52 = "new",
      peg$c53 = peg$literalExpectation("new", false),
      peg$c54 = function(expr) { return expr; },
      peg$c55 = "this",
      peg$c56 = peg$literalExpectation("this", false),
      peg$c57 = function(rp) {
      		return [rp];
      	},
      peg$c58 = function(nrp, rp) {
      		var result = [];
      		if (nrp !== '') {
      			result = nrp;
      		}
      		if (rp && rp[3]) {
      			result.push(rp[3]);
      		}
      		return result;
      	},
      peg$c59 = function(p, list) {
      		var result = [p];
      		for (var i = 0, l = list.length; i < l; i++) {
      			result.push(list[i][3]);
      		}
      		return result;
      	},
      peg$c60 = function(op, list) {
      		var result = [op];
      		for (var i = 0, l = list.length; i < l; i++) {
      			result.push(list[i][3]);
      		}
      		return result;
      	},
      peg$c61 = function(paramType) { return paramType; },
      peg$c62 = function(t) {
      		t = optional(t);
      		return t;
      	},
      peg$c63 = "[",
      peg$c64 = peg$literalExpectation("[", false),
      peg$c65 = "]",
      peg$c66 = peg$literalExpectation("]", false),
      peg$c67 = function(t) {
      		return repeatable(t || '');
      	},
      peg$c68 = function() {
      		return repeatable({});
      	},
      peg$c69 = function(t, opt) {
      		var result = {
      			type: Types.TypeUnion,
      			elements: t
      		};

      		if (opt) {
      			result = optional(result);
      		}

      		return result;
      	},
      peg$c70 = function(tu) {
      		return repeatable(tu);
      	},
      peg$c71 = function(expr, list) {
      		var result = [expr];
      		for (var i = 0, l = list.length; i < l; i++) {
      			result.push(list[i][1]);
      		}
      		return result;
      	},
      peg$c72 = function(expr, list) {
      		var result = [expr];

      		for (var i = 0, l = list.length; i < l; i++) {
      			result.push(list[i][1]);
      		}

      		return result;
      	},
      peg$c73 = function(list) {
      		return {
      			type: Types.TypeUnion,
      			elements: list
      		};
      	},
      peg$c74 = "|",
      peg$c75 = peg$literalExpectation("|", false),
      peg$c76 = function() {
      		return '';
      	},
      peg$c77 = "{",
      peg$c78 = peg$literalExpectation("{", false),
      peg$c79 = "}",
      peg$c80 = peg$literalExpectation("}", false),
      peg$c81 = function(list, opt) {
      		var result = {
      			type: Types.RecordType,
      			fields: list || []
      		};

      		if (opt) {
      			result = optional(result);
      		}

      		return result;
      	},
      peg$c82 = function(type, list) {
      		var result = [type];

      		list = list || [];
      		for (var i = 0, l = list.length; i < l; i++) {
      			result.push(list[i][3]);
      		}
      		return result;
      	},
      peg$c83 = function(key, expr) {
      		var result = {
      			type: Types.FieldType,
      			key: key,
      			value: undefined
      		};

      		if (expr && expr[3]) {
      			result.value = expr[3];
      		}

      		return result;
      	},
      peg$c84 = function(t) {
      		if (!options.jsdoc) {
      			return null;
      		}

      		return t;
      	},
      peg$c85 = function(lit) {
      		if (!options.jsdoc) {
      			return null;
      		}

      		return {
      			name: '"' + lit.join('') + '"'
      		};
      	},
      peg$c86 = function(lit) {
      		if (!options.jsdoc) {
      			return null;
      		}

      		return {
      			name: "'" + lit.join('') + "'"
      		};
      	},
      peg$c87 = function(id, props) {
      		props = props || '';

      		return {
      			name: id + props
      		};
      	},
      peg$c88 = function(rw) {
      		return {
      			name: rw
      		};
      	},
      peg$c89 = function(lit) {
      		return '"' + lit + '"';
      	},
      peg$c90 = function(lit) {
      		return "'" + lit + "'";
      	},
      peg$c91 = "#",
      peg$c92 = peg$literalExpectation("#", false),
      peg$c93 = "~",
      peg$c94 = peg$literalExpectation("~", false),
      peg$c95 = "/",
      peg$c96 = peg$literalExpectation("/", false),
      peg$c97 = function(sep, prop) {
      		// we only allow '.' unless JSDoc parsing is enabled
      		if (sep !== '.' && !options.jsdoc) {
      			return null;
      		}

      		return sep + prop;
      	},
      peg$c98 = function(name) { return name; },
      peg$c99 = "$",
      peg$c100 = peg$literalExpectation("$", false),
      peg$c101 = "_",
      peg$c102 = peg$literalExpectation("_", false),
      peg$c103 = "@",
      peg$c104 = peg$literalExpectation("@", false),
      peg$c105 = "-",
      peg$c106 = peg$literalExpectation("-", false),
      peg$c107 = "\u200C",
      peg$c108 = peg$literalExpectation("\u200C", false),
      peg$c109 = "\u200D",
      peg$c110 = peg$literalExpectation("\u200D", false),
      peg$c111 = function(parts) {
      		if (!options.jsdoc) {
      			return null;
      		}

      		parts = parts || [];

      		return '(' + parts.join(', ') + ')';

      	},
      peg$c112 = function(params) {
      		if (!options.jsdoc) {
      			return null;
      		}

      		params = params || [];

      		return '(' + params.join(', ') + ')';
      	},
      peg$c113 = "break",
      peg$c114 = peg$literalExpectation("break", false),
      peg$c115 = "case",
      peg$c116 = peg$literalExpectation("case", false),
      peg$c117 = "catch",
      peg$c118 = peg$literalExpectation("catch", false),
      peg$c119 = "continue",
      peg$c120 = peg$literalExpectation("continue", false),
      peg$c121 = "debugger",
      peg$c122 = peg$literalExpectation("debugger", false),
      peg$c123 = "default",
      peg$c124 = peg$literalExpectation("default", false),
      peg$c125 = "delete",
      peg$c126 = peg$literalExpectation("delete", false),
      peg$c127 = "do",
      peg$c128 = peg$literalExpectation("do", false),
      peg$c129 = "else",
      peg$c130 = peg$literalExpectation("else", false),
      peg$c131 = "finally",
      peg$c132 = peg$literalExpectation("finally", false),
      peg$c133 = "for",
      peg$c134 = peg$literalExpectation("for", false),
      peg$c135 = "if",
      peg$c136 = peg$literalExpectation("if", false),
      peg$c137 = "in",
      peg$c138 = peg$literalExpectation("in", false),
      peg$c139 = "instanceof",
      peg$c140 = peg$literalExpectation("instanceof", false),
      peg$c141 = "return",
      peg$c142 = peg$literalExpectation("return", false),
      peg$c143 = "switch",
      peg$c144 = peg$literalExpectation("switch", false),
      peg$c145 = "throw",
      peg$c146 = peg$literalExpectation("throw", false),
      peg$c147 = "try",
      peg$c148 = peg$literalExpectation("try", false),
      peg$c149 = "typeof",
      peg$c150 = peg$literalExpectation("typeof", false),
      peg$c151 = "var",
      peg$c152 = peg$literalExpectation("var", false),
      peg$c153 = "void",
      peg$c154 = peg$literalExpectation("void", false),
      peg$c155 = "while",
      peg$c156 = peg$literalExpectation("while", false),
      peg$c157 = "with",
      peg$c158 = peg$literalExpectation("with", false),
      peg$c159 = function(kw) {
      		return kw;
      	},
      peg$c160 = "class",
      peg$c161 = peg$literalExpectation("class", false),
      peg$c162 = "const",
      peg$c163 = peg$literalExpectation("const", false),
      peg$c164 = "enum",
      peg$c165 = peg$literalExpectation("enum", false),
      peg$c166 = "export",
      peg$c167 = peg$literalExpectation("export", false),
      peg$c168 = "extends",
      peg$c169 = peg$literalExpectation("extends", false),
      peg$c170 = "import",
      peg$c171 = peg$literalExpectation("import", false),
      peg$c172 = "super",
      peg$c173 = peg$literalExpectation("super", false),
      peg$c174 = "implements",
      peg$c175 = peg$literalExpectation("implements", false),
      peg$c176 = "interface",
      peg$c177 = peg$literalExpectation("interface", false),
      peg$c178 = "let",
      peg$c179 = peg$literalExpectation("let", false),
      peg$c180 = "package",
      peg$c181 = peg$literalExpectation("package", false),
      peg$c182 = "private",
      peg$c183 = peg$literalExpectation("private", false),
      peg$c184 = "protected",
      peg$c185 = peg$literalExpectation("protected", false),
      peg$c186 = "public",
      peg$c187 = peg$literalExpectation("public", false),
      peg$c188 = "static",
      peg$c189 = peg$literalExpectation("static", false),
      peg$c190 = "yield",
      peg$c191 = peg$literalExpectation("yield", false),
      peg$c192 = function(frw) {
      		return frw;
      	},
      peg$c193 = "\"",
      peg$c194 = peg$literalExpectation("\"", false),
      peg$c195 = function(str) {
      		return str;
      	},
      peg$c196 = "'",
      peg$c197 = peg$literalExpectation("'", false),
      peg$c198 = function(lit, digits, exp) {
      		return parseFloat(lit + '.' + (digits || '') + (exp || ''));
      	},
      peg$c199 = function(digits, exp) {
      		return parseFloat('.' + digits + (exp || ''));
      	},
      peg$c200 = function(lit, exp) {
      		return parseFloat(lit + (exp || ''));
      	},
      peg$c201 = "0",
      peg$c202 = peg$literalExpectation("0", false),
      peg$c203 = /^[eE]/,
      peg$c204 = peg$classExpectation(["e", "E"], false, false),
      peg$c205 = /^[+\-]/,
      peg$c206 = peg$classExpectation(["+", "-"], false, false),
      peg$c207 = /^[xX]/,
      peg$c208 = peg$classExpectation(["x", "X"], false, false),
      peg$c209 = function(hex) {
      		return parseInt('0x' + hex, 16);
      	},
      peg$c210 = "null",
      peg$c211 = peg$literalExpectation("null", false),
      peg$c212 = "undefined",
      peg$c213 = peg$literalExpectation("undefined", false),
      peg$c214 = function() {
      		return {
      			type: Types.UnknownLiteral
      		};
      	},
      peg$c215 = "true",
      peg$c216 = peg$literalExpectation("true", false),
      peg$c217 = "false",
      peg$c218 = peg$literalExpectation("false", false),
      peg$c219 = "Function",
      peg$c220 = peg$literalExpectation("Function", false),
      peg$c221 = "function",
      peg$c222 = peg$literalExpectation("function", false),
      peg$c223 = "\\",
      peg$c224 = peg$literalExpectation("\\", false),
      peg$c225 = "u",
      peg$c226 = peg$literalExpectation("u", false),
      peg$c227 = function(hex) {
      		return String.fromCharCode(parseInt('0x' + hex), 16);
      	},
      peg$c228 = /^[0-9]/,
      peg$c229 = peg$classExpectation([["0", "9"]], false, false),
      peg$c230 = /^[1-9]/,
      peg$c231 = peg$classExpectation([["1", "9"]], false, false),
      peg$c232 = /^[0-9a-fA-F]/,
      peg$c233 = peg$classExpectation([["0", "9"], ["a", "f"], ["A", "F"]], false, false),
      peg$c234 = peg$otherExpectation("Unicode combining mark"),
      peg$c235 = /^[\u0903\u093E\u093F\u0940\u0949\u094A\u094B\u094C\u0982\u0983\u09BE\u09BF\u09C0\u09C7\u09C8\u09CB\u09CC\u09D7\u0A03\u0A3E\u0A3F\u0A40\u0A83\u0ABE\u0ABF\u0AC0\u0AC9\u0ACB\u0ACC\u0B02\u0B03\u0B3E\u0B40\u0B47\u0B48\u0B4B\u0B4C\u0B57\u0BBE\u0BBF\u0BC1\u0BC2\u0BC6\u0BC7\u0BC8\u0BCA\u0BCB\u0BCC\u0BD7\u0C01\u0C02\u0C03\u0C41\u0C42\u0C43\u0C44\u0C82\u0C83\u0CBE\u0CC0\u0CC1\u0CC2\u0CC3\u0CC4\u0CC7\u0CC8\u0CCA\u0CCB\u0CD5\u0CD6\u0D02\u0D03\u0D3E\u0D3F\u0D40\u0D46\u0D47\u0D48\u0D4A\u0D4B\u0D4C\u0D57\u0D82\u0D83\u0DCF\u0DD0\u0DD1\u0DD8\u0DD9\u0DDA\u0DDB\u0DDC\u0DDD\u0DDE\u0DDF\u0DF2\u0DF3\u0F3E\u0F3F\u0F7F\u102B\u102C\u1031\u1038\u103B\u103C\u1056\u1057\u1062\u1063\u1064\u1067\u1068\u1069\u106A\u106B\u106C\u106D\u1083\u1084\u1087\u1088\u1089\u108A\u108B\u108C\u108F\u17B6\u17BE\u17BF\u17C0\u17C1\u17C2\u17C3\u17C4\u17C5\u17C7\u17C8\u1923\u1924\u1925\u1926\u1929\u192A\u192B\u1930\u1931\u1933\u1934\u1935\u1936\u1937\u1938\u19B0\u19B1\u19B2\u19B3\u19B4\u19B5\u19B6\u19B7\u19B8\u19B9\u19BA\u19BB\u19BC\u19BD\u19BE\u19BF\u19C0\u19C8\u19C9\u1A19\u1A1A\u1A1B\u1B04\u1B35\u1B3B\u1B3D\u1B3E\u1B3F\u1B40\u1B41\u1B43\u1B44\u1B82\u1BA1\u1BA6\u1BA7\u1BAA\u1C24\u1C25\u1C26\u1C27\u1C28\u1C29\u1C2A\u1C2B\u1C34\u1C35\uA823\uA824\uA827\uA880\uA881\uA8B4\uA8B5\uA8B6\uA8B7\uA8B8\uA8B9\uA8BA\uA8BB\uA8BC\uA8BD\uA8BE\uA8BF\uA8C0\uA8C1\uA8C2\uA8C3\uA952\uA953\uAA2F\uAA30\uAA33\uAA34\uAA4D]/,
      peg$c236 = peg$classExpectation(["\u0903", "\u093E", "\u093F", "\u0940", "\u0949", "\u094A", "\u094B", "\u094C", "\u0982", "\u0983", "\u09BE", "\u09BF", "\u09C0", "\u09C7", "\u09C8", "\u09CB", "\u09CC", "\u09D7", "\u0A03", "\u0A3E", "\u0A3F", "\u0A40", "\u0A83", "\u0ABE", "\u0ABF", "\u0AC0", "\u0AC9", "\u0ACB", "\u0ACC", "\u0B02", "\u0B03", "\u0B3E", "\u0B40", "\u0B47", "\u0B48", "\u0B4B", "\u0B4C", "\u0B57", "\u0BBE", "\u0BBF", "\u0BC1", "\u0BC2", "\u0BC6", "\u0BC7", "\u0BC8", "\u0BCA", "\u0BCB", "\u0BCC", "\u0BD7", "\u0C01", "\u0C02", "\u0C03", "\u0C41", "\u0C42", "\u0C43", "\u0C44", "\u0C82", "\u0C83", "\u0CBE", "\u0CC0", "\u0CC1", "\u0CC2", "\u0CC3", "\u0CC4", "\u0CC7", "\u0CC8", "\u0CCA", "\u0CCB", "\u0CD5", "\u0CD6", "\u0D02", "\u0D03", "\u0D3E", "\u0D3F", "\u0D40", "\u0D46", "\u0D47", "\u0D48", "\u0D4A", "\u0D4B", "\u0D4C", "\u0D57", "\u0D82", "\u0D83", "\u0DCF", "\u0DD0", "\u0DD1", "\u0DD8", "\u0DD9", "\u0DDA", "\u0DDB", "\u0DDC", "\u0DDD", "\u0DDE", "\u0DDF", "\u0DF2", "\u0DF3", "\u0F3E", "\u0F3F", "\u0F7F", "\u102B", "\u102C", "\u1031", "\u1038", "\u103B", "\u103C", "\u1056", "\u1057", "\u1062", "\u1063", "\u1064", "\u1067", "\u1068", "\u1069", "\u106A", "\u106B", "\u106C", "\u106D", "\u1083", "\u1084", "\u1087", "\u1088", "\u1089", "\u108A", "\u108B", "\u108C", "\u108F", "\u17B6", "\u17BE", "\u17BF", "\u17C0", "\u17C1", "\u17C2", "\u17C3", "\u17C4", "\u17C5", "\u17C7", "\u17C8", "\u1923", "\u1924", "\u1925", "\u1926", "\u1929", "\u192A", "\u192B", "\u1930", "\u1931", "\u1933", "\u1934", "\u1935", "\u1936", "\u1937", "\u1938", "\u19B0", "\u19B1", "\u19B2", "\u19B3", "\u19B4", "\u19B5", "\u19B6", "\u19B7", "\u19B8", "\u19B9", "\u19BA", "\u19BB", "\u19BC", "\u19BD", "\u19BE", "\u19BF", "\u19C0", "\u19C8", "\u19C9", "\u1A19", "\u1A1A", "\u1A1B", "\u1B04", "\u1B35", "\u1B3B", "\u1B3D", "\u1B3E", "\u1B3F", "\u1B40", "\u1B41", "\u1B43", "\u1B44", "\u1B82", "\u1BA1", "\u1BA6", "\u1BA7", "\u1BAA", "\u1C24", "\u1C25", "\u1C26", "\u1C27", "\u1C28", "\u1C29", "\u1C2A", "\u1C2B", "\u1C34", "\u1C35", "\uA823", "\uA824", "\uA827", "\uA880", "\uA881", "\uA8B4", "\uA8B5", "\uA8B6", "\uA8B7", "\uA8B8", "\uA8B9", "\uA8BA", "\uA8BB", "\uA8BC", "\uA8BD", "\uA8BE", "\uA8BF", "\uA8C0", "\uA8C1", "\uA8C2", "\uA8C3", "\uA952", "\uA953", "\uAA2F", "\uAA30", "\uAA33", "\uAA34", "\uAA4D"], false, false),
      peg$c237 = peg$otherExpectation("Unicode decimal number"),
      peg$c238 = /^[0123456789\u0660\u0661\u0662\u0663\u0664\u0665\u0666\u0667\u0668\u0669\u06F0\u06F1\u06F2\u06F3\u06F4\u06F5\u06F6\u06F7\u06F8\u06F9\u07C0\u07C1\u07C2\u07C3\u07C4\u07C5\u07C6\u07C7\u07C8\u07C9\u0966\u0967\u0968\u0969\u096A\u096B\u096C\u096D\u096E\u096F\u09E6\u09E7\u09E8\u09E9\u09EA\u09EB\u09EC\u09ED\u09EE\u09EF\u0A66\u0A67\u0A68\u0A69\u0A6A\u0A6B\u0A6C\u0A6D\u0A6E\u0A6F\u0AE6\u0AE7\u0AE8\u0AE9\u0AEA\u0AEB\u0AEC\u0AED\u0AEE\u0AEF\u0B66\u0B67\u0B68\u0B69\u0B6A\u0B6B\u0B6C\u0B6D\u0B6E\u0B6F\u0BE6\u0BE7\u0BE8\u0BE9\u0BEA\u0BEB\u0BEC\u0BED\u0BEE\u0BEF\u0C66\u0C67\u0C68\u0C69\u0C6A\u0C6B\u0C6C\u0C6D\u0C6E\u0C6F\u0CE6\u0CE7\u0CE8\u0CE9\u0CEA\u0CEB\u0CEC\u0CED\u0CEE\u0CEF\u0D66\u0D67\u0D68\u0D69\u0D6A\u0D6B\u0D6C\u0D6D\u0D6E\u0D6F\u0E50\u0E51\u0E52\u0E53\u0E54\u0E55\u0E56\u0E57\u0E58\u0E59\u0ED0\u0ED1\u0ED2\u0ED3\u0ED4\u0ED5\u0ED6\u0ED7\u0ED8\u0ED9\u0F20\u0F21\u0F22\u0F23\u0F24\u0F25\u0F26\u0F27\u0F28\u0F29\u1040\u1041\u1042\u1043\u1044\u1045\u1046\u1047\u1048\u1049\u1090\u1091\u1092\u1093\u1094\u1095\u1096\u1097\u1098\u1099\u17E0\u17E1\u17E2\u17E3\u17E4\u17E5\u17E6\u17E7\u17E8\u17E9\u1810\u1811\u1812\u1813\u1814\u1815\u1816\u1817\u1818\u1819\u1946\u1947\u1948\u1949\u194A\u194B\u194C\u194D\u194E\u194F\u19D0\u19D1\u19D2\u19D3\u19D4\u19D5\u19D6\u19D7\u19D8\u19D9\u1B50\u1B51\u1B52\u1B53\u1B54\u1B55\u1B56\u1B57\u1B58\u1B59\u1BB0\u1BB1\u1BB2\u1BB3\u1BB4\u1BB5\u1BB6\u1BB7\u1BB8\u1BB9\u1C40\u1C41\u1C42\u1C43\u1C44\u1C45\u1C46\u1C47\u1C48\u1C49\u1C50\u1C51\u1C52\u1C53\u1C54\u1C55\u1C56\u1C57\u1C58\u1C59\uA620\uA621\uA622\uA623\uA624\uA625\uA626\uA627\uA628\uA629\uA8D0\uA8D1\uA8D2\uA8D3\uA8D4\uA8D5\uA8D6\uA8D7\uA8D8\uA8D9\uA900\uA901\uA902\uA903\uA904\uA905\uA906\uA907\uA908\uA909\uAA50\uAA51\uAA52\uAA53\uAA54\uAA55\uAA56\uAA57\uAA58\uAA59\uFF10\uFF11\uFF12\uFF13\uFF14\uFF15\uFF16\uFF17\uFF18\uFF19]/,
      peg$c239 = peg$classExpectation(["0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "\u0660", "\u0661", "\u0662", "\u0663", "\u0664", "\u0665", "\u0666", "\u0667", "\u0668", "\u0669", "\u06F0", "\u06F1", "\u06F2", "\u06F3", "\u06F4", "\u06F5", "\u06F6", "\u06F7", "\u06F8", "\u06F9", "\u07C0", "\u07C1", "\u07C2", "\u07C3", "\u07C4", "\u07C5", "\u07C6", "\u07C7", "\u07C8", "\u07C9", "\u0966", "\u0967", "\u0968", "\u0969", "\u096A", "\u096B", "\u096C", "\u096D", "\u096E", "\u096F", "\u09E6", "\u09E7", "\u09E8", "\u09E9", "\u09EA", "\u09EB", "\u09EC", "\u09ED", "\u09EE", "\u09EF", "\u0A66", "\u0A67", "\u0A68", "\u0A69", "\u0A6A", "\u0A6B", "\u0A6C", "\u0A6D", "\u0A6E", "\u0A6F", "\u0AE6", "\u0AE7", "\u0AE8", "\u0AE9", "\u0AEA", "\u0AEB", "\u0AEC", "\u0AED", "\u0AEE", "\u0AEF", "\u0B66", "\u0B67", "\u0B68", "\u0B69", "\u0B6A", "\u0B6B", "\u0B6C", "\u0B6D", "\u0B6E", "\u0B6F", "\u0BE6", "\u0BE7", "\u0BE8", "\u0BE9", "\u0BEA", "\u0BEB", "\u0BEC", "\u0BED", "\u0BEE", "\u0BEF", "\u0C66", "\u0C67", "\u0C68", "\u0C69", "\u0C6A", "\u0C6B", "\u0C6C", "\u0C6D", "\u0C6E", "\u0C6F", "\u0CE6", "\u0CE7", "\u0CE8", "\u0CE9", "\u0CEA", "\u0CEB", "\u0CEC", "\u0CED", "\u0CEE", "\u0CEF", "\u0D66", "\u0D67", "\u0D68", "\u0D69", "\u0D6A", "\u0D6B", "\u0D6C", "\u0D6D", "\u0D6E", "\u0D6F", "\u0E50", "\u0E51", "\u0E52", "\u0E53", "\u0E54", "\u0E55", "\u0E56", "\u0E57", "\u0E58", "\u0E59", "\u0ED0", "\u0ED1", "\u0ED2", "\u0ED3", "\u0ED4", "\u0ED5", "\u0ED6", "\u0ED7", "\u0ED8", "\u0ED9", "\u0F20", "\u0F21", "\u0F22", "\u0F23", "\u0F24", "\u0F25", "\u0F26", "\u0F27", "\u0F28", "\u0F29", "\u1040", "\u1041", "\u1042", "\u1043", "\u1044", "\u1045", "\u1046", "\u1047", "\u1048", "\u1049", "\u1090", "\u1091", "\u1092", "\u1093", "\u1094", "\u1095", "\u1096", "\u1097", "\u1098", "\u1099", "\u17E0", "\u17E1", "\u17E2", "\u17E3", "\u17E4", "\u17E5", "\u17E6", "\u17E7", "\u17E8", "\u17E9", "\u1810", "\u1811", "\u1812", "\u1813", "\u1814", "\u1815", "\u1816", "\u1817", "\u1818", "\u1819", "\u1946", "\u1947", "\u1948", "\u1949", "\u194A", "\u194B", "\u194C", "\u194D", "\u194E", "\u194F", "\u19D0", "\u19D1", "\u19D2", "\u19D3", "\u19D4", "\u19D5", "\u19D6", "\u19D7", "\u19D8", "\u19D9", "\u1B50", "\u1B51", "\u1B52", "\u1B53", "\u1B54", "\u1B55", "\u1B56", "\u1B57", "\u1B58", "\u1B59", "\u1BB0", "\u1BB1", "\u1BB2", "\u1BB3", "\u1BB4", "\u1BB5", "\u1BB6", "\u1BB7", "\u1BB8", "\u1BB9", "\u1C40", "\u1C41", "\u1C42", "\u1C43", "\u1C44", "\u1C45", "\u1C46", "\u1C47", "\u1C48", "\u1C49", "\u1C50", "\u1C51", "\u1C52", "\u1C53", "\u1C54", "\u1C55", "\u1C56", "\u1C57", "\u1C58", "\u1C59", "\uA620", "\uA621", "\uA622", "\uA623", "\uA624", "\uA625", "\uA626", "\uA627", "\uA628", "\uA629", "\uA8D0", "\uA8D1", "\uA8D2", "\uA8D3", "\uA8D4", "\uA8D5", "\uA8D6", "\uA8D7", "\uA8D8", "\uA8D9", "\uA900", "\uA901", "\uA902", "\uA903", "\uA904", "\uA905", "\uA906", "\uA907", "\uA908", "\uA909", "\uAA50", "\uAA51", "\uAA52", "\uAA53", "\uAA54", "\uAA55", "\uAA56", "\uAA57", "\uAA58", "\uAA59", "\uFF10", "\uFF11", "\uFF12", "\uFF13", "\uFF14", "\uFF15", "\uFF16", "\uFF17", "\uFF18", "\uFF19"], false, false),
      peg$c240 = peg$otherExpectation("Unicode punctuation connector"),
      peg$c241 = /^[_\u203F\u2040\u2054\uFE33\uFE34\uFE4D\uFE4E\uFE4F\uFF3F]/,
      peg$c242 = peg$classExpectation(["_", "\u203F", "\u2040", "\u2054", "\uFE33", "\uFE34", "\uFE4D", "\uFE4E", "\uFE4F", "\uFF3F"], false, false),
      peg$c243 = peg$otherExpectation("Unicode uppercase letter"),
      peg$c244 = /^[ABCDEFGHIJKLMNOPQRSTUVWXYZ\xC0\xC1\xC2\xC3\xC4\xC5\xC6\xC7\xC8\xC9\xCA\xCB\xCC\xCD\xCE\xCF\xD0\xD1\xD2\xD3\xD4\xD5\xD6\xD8\xD9\xDA\xDB\xDC\xDD\xDE\u0100\u0102\u0104\u0106\u0108\u010A\u010C\u010E\u0110\u0112\u0114\u0116\u0118\u011A\u011C\u011E\u0120\u0122\u0124\u0126\u0128\u012A\u012C\u012E\u0130\u0132\u0134\u0136\u0139\u013B\u013D\u013F\u0141\u0143\u0145\u0147\u014A\u014C\u014E\u0150\u0152\u0154\u0156\u0158\u015A\u015C\u015E\u0160\u0162\u0164\u0166\u0168\u016A\u016C\u016E\u0170\u0172\u0174\u0176\u0178\u0179\u017B\u017D\u0181\u0182\u0184\u0186\u0187\u0189\u018A\u018B\u018E\u018F\u0190\u0191\u0193\u0194\u0196\u0197\u0198\u019C\u019D\u019F\u01A0\u01A2\u01A4\u01A6\u01A7\u01A9\u01AC\u01AE\u01AF\u01B1\u01B2\u01B3\u01B5\u01B7\u01B8\u01BC\u01C4\u01C7\u01CA\u01CD\u01CF\u01D1\u01D3\u01D5\u01D7\u01D9\u01DB\u01DE\u01E0\u01E2\u01E4\u01E6\u01E8\u01EA\u01EC\u01EE\u01F1\u01F4\u01F6\u01F7\u01F8\u01FA\u01FC\u01FE\u0200\u0202\u0204\u0206\u0208\u020A\u020C\u020E\u0210\u0212\u0214\u0216\u0218\u021A\u021C\u021E\u0220\u0222\u0224\u0226\u0228\u022A\u022C\u022E\u0230\u0232\u023A\u023B\u023D\u023E\u0241\u0243\u0244\u0245\u0246\u0248\u024A\u024C\u024E\u0370\u0372\u0376\u0386\u0388\u0389\u038A\u038C\u038E\u038F\u0391\u0392\u0393\u0394\u0395\u0396\u0397\u0398\u0399\u039A\u039B\u039C\u039D\u039E\u039F\u03A0\u03A1\u03A3\u03A4\u03A5\u03A6\u03A7\u03A8\u03A9\u03AA\u03AB\u03CF\u03D2\u03D3\u03D4\u03D8\u03DA\u03DC\u03DE\u03E0\u03E2\u03E4\u03E6\u03E8\u03EA\u03EC\u03EE\u03F4\u03F7\u03F9\u03FA\u03FD\u03FE\u03FF\u0400\u0401\u0402\u0403\u0404\u0405\u0406\u0407\u0408\u0409\u040A\u040B\u040C\u040D\u040E\u040F\u0410\u0411\u0412\u0413\u0414\u0415\u0416\u0417\u0418\u0419\u041A\u041B\u041C\u041D\u041E\u041F\u0420\u0421\u0422\u0423\u0424\u0425\u0426\u0427\u0428\u0429\u042A\u042B\u042C\u042D\u042E\u042F\u0460\u0462\u0464\u0466\u0468\u046A\u046C\u046E\u0470\u0472\u0474\u0476\u0478\u047A\u047C\u047E\u0480\u048A\u048C\u048E\u0490\u0492\u0494\u0496\u0498\u049A\u049C\u049E\u04A0\u04A2\u04A4\u04A6\u04A8\u04AA\u04AC\u04AE\u04B0\u04B2\u04B4\u04B6\u04B8\u04BA\u04BC\u04BE\u04C0\u04C1\u04C3\u04C5\u04C7\u04C9\u04CB\u04CD\u04D0\u04D2\u04D4\u04D6\u04D8\u04DA\u04DC\u04DE\u04E0\u04E2\u04E4\u04E6\u04E8\u04EA\u04EC\u04EE\u04F0\u04F2\u04F4\u04F6\u04F8\u04FA\u04FC\u04FE\u0500\u0502\u0504\u0506\u0508\u050A\u050C\u050E\u0510\u0512\u0514\u0516\u0518\u051A\u051C\u051E\u0520\u0522\u0531\u0532\u0533\u0534\u0535\u0536\u0537\u0538\u0539\u053A\u053B\u053C\u053D\u053E\u053F\u0540\u0541\u0542\u0543\u0544\u0545\u0546\u0547\u0548\u0549\u054A\u054B\u054C\u054D\u054E\u054F\u0550\u0551\u0552\u0553\u0554\u0555\u0556\u10A0\u10A1\u10A2\u10A3\u10A4\u10A5\u10A6\u10A7\u10A8\u10A9\u10AA\u10AB\u10AC\u10AD\u10AE\u10AF\u10B0\u10B1\u10B2\u10B3\u10B4\u10B5\u10B6\u10B7\u10B8\u10B9\u10BA\u10BB\u10BC\u10BD\u10BE\u10BF\u10C0\u10C1\u10C2\u10C3\u10C4\u10C5\u1E00\u1E02\u1E04\u1E06\u1E08\u1E0A\u1E0C\u1E0E\u1E10\u1E12\u1E14\u1E16\u1E18\u1E1A\u1E1C\u1E1E\u1E20\u1E22\u1E24\u1E26\u1E28\u1E2A\u1E2C\u1E2E\u1E30\u1E32\u1E34\u1E36\u1E38\u1E3A\u1E3C\u1E3E\u1E40\u1E42\u1E44\u1E46\u1E48\u1E4A\u1E4C\u1E4E\u1E50\u1E52\u1E54\u1E56\u1E58\u1E5A\u1E5C\u1E5E\u1E60\u1E62\u1E64\u1E66\u1E68\u1E6A\u1E6C\u1E6E\u1E70\u1E72\u1E74\u1E76\u1E78\u1E7A\u1E7C\u1E7E\u1E80\u1E82\u1E84\u1E86\u1E88\u1E8A\u1E8C\u1E8E\u1E90\u1E92\u1E94\u1E9E\u1EA0\u1EA2\u1EA4\u1EA6\u1EA8\u1EAA\u1EAC\u1EAE\u1EB0\u1EB2\u1EB4\u1EB6\u1EB8\u1EBA\u1EBC\u1EBE\u1EC0\u1EC2\u1EC4\u1EC6\u1EC8\u1ECA\u1ECC\u1ECE\u1ED0\u1ED2\u1ED4\u1ED6\u1ED8\u1EDA\u1EDC\u1EDE\u1EE0\u1EE2\u1EE4\u1EE6\u1EE8\u1EEA\u1EEC\u1EEE\u1EF0\u1EF2\u1EF4\u1EF6\u1EF8\u1EFA\u1EFC\u1EFE\u1F08\u1F09\u1F0A\u1F0B\u1F0C\u1F0D\u1F0E\u1F0F\u1F18\u1F19\u1F1A\u1F1B\u1F1C\u1F1D\u1F28\u1F29\u1F2A\u1F2B\u1F2C\u1F2D\u1F2E\u1F2F\u1F38\u1F39\u1F3A\u1F3B\u1F3C\u1F3D\u1F3E\u1F3F\u1F48\u1F49\u1F4A\u1F4B\u1F4C\u1F4D\u1F59\u1F5B\u1F5D\u1F5F\u1F68\u1F69\u1F6A\u1F6B\u1F6C\u1F6D\u1F6E\u1F6F\u1FB8\u1FB9\u1FBA\u1FBB\u1FC8\u1FC9\u1FCA\u1FCB\u1FD8\u1FD9\u1FDA\u1FDB\u1FE8\u1FE9\u1FEA\u1FEB\u1FEC\u1FF8\u1FF9\u1FFA\u1FFB\u2102\u2107\u210B\u210C\u210D\u2110\u2111\u2112\u2115\u2119\u211A\u211B\u211C\u211D\u2124\u2126\u2128\u212A\u212B\u212C\u212D\u2130\u2131\u2132\u2133\u213E\u213F\u2145\u2183\u2C00\u2C01\u2C02\u2C03\u2C04\u2C05\u2C06\u2C07\u2C08\u2C09\u2C0A\u2C0B\u2C0C\u2C0D\u2C0E\u2C0F\u2C10\u2C11\u2C12\u2C13\u2C14\u2C15\u2C16\u2C17\u2C18\u2C19\u2C1A\u2C1B\u2C1C\u2C1D\u2C1E\u2C1F\u2C20\u2C21\u2C22\u2C23\u2C24\u2C25\u2C26\u2C27\u2C28\u2C29\u2C2A\u2C2B\u2C2C\u2C2D\u2C2E\u2C60\u2C62\u2C63\u2C64\u2C67\u2C69\u2C6B\u2C6D\u2C6E\u2C6F\u2C72\u2C75\u2C80\u2C82\u2C84\u2C86\u2C88\u2C8A\u2C8C\u2C8E\u2C90\u2C92\u2C94\u2C96\u2C98\u2C9A\u2C9C\u2C9E\u2CA0\u2CA2\u2CA4\u2CA6\u2CA8\u2CAA\u2CAC\u2CAE\u2CB0\u2CB2\u2CB4\u2CB6\u2CB8\u2CBA\u2CBC\u2CBE\u2CC0\u2CC2\u2CC4\u2CC6\u2CC8\u2CCA\u2CCC\u2CCE\u2CD0\u2CD2\u2CD4\u2CD6\u2CD8\u2CDA\u2CDC\u2CDE\u2CE0\u2CE2\uA640\uA642\uA644\uA646\uA648\uA64A\uA64C\uA64E\uA650\uA652\uA654\uA656\uA658\uA65A\uA65C\uA65E\uA662\uA664\uA666\uA668\uA66A\uA66C\uA680\uA682\uA684\uA686\uA688\uA68A\uA68C\uA68E\uA690\uA692\uA694\uA696\uA722\uA724\uA726\uA728\uA72A\uA72C\uA72E\uA732\uA734\uA736\uA738\uA73A\uA73C\uA73E\uA740\uA742\uA744\uA746\uA748\uA74A\uA74C\uA74E\uA750\uA752\uA754\uA756\uA758\uA75A\uA75C\uA75E\uA760\uA762\uA764\uA766\uA768\uA76A\uA76C\uA76E\uA779\uA77B\uA77D\uA77E\uA780\uA782\uA784\uA786\uA78B\uFF21\uFF22\uFF23\uFF24\uFF25\uFF26\uFF27\uFF28\uFF29\uFF2A\uFF2B\uFF2C\uFF2D\uFF2E\uFF2F\uFF30\uFF31\uFF32\uFF33\uFF34\uFF35\uFF36\uFF37\uFF38\uFF39\uFF3A]/,
      peg$c245 = peg$classExpectation(["A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "O", "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y", "Z", "\xC0", "\xC1", "\xC2", "\xC3", "\xC4", "\xC5", "\xC6", "\xC7", "\xC8", "\xC9", "\xCA", "\xCB", "\xCC", "\xCD", "\xCE", "\xCF", "\xD0", "\xD1", "\xD2", "\xD3", "\xD4", "\xD5", "\xD6", "\xD8", "\xD9", "\xDA", "\xDB", "\xDC", "\xDD", "\xDE", "\u0100", "\u0102", "\u0104", "\u0106", "\u0108", "\u010A", "\u010C", "\u010E", "\u0110", "\u0112", "\u0114", "\u0116", "\u0118", "\u011A", "\u011C", "\u011E", "\u0120", "\u0122", "\u0124", "\u0126", "\u0128", "\u012A", "\u012C", "\u012E", "\u0130", "\u0132", "\u0134", "\u0136", "\u0139", "\u013B", "\u013D", "\u013F", "\u0141", "\u0143", "\u0145", "\u0147", "\u014A", "\u014C", "\u014E", "\u0150", "\u0152", "\u0154", "\u0156", "\u0158", "\u015A", "\u015C", "\u015E", "\u0160", "\u0162", "\u0164", "\u0166", "\u0168", "\u016A", "\u016C", "\u016E", "\u0170", "\u0172", "\u0174", "\u0176", "\u0178", "\u0179", "\u017B", "\u017D", "\u0181", "\u0182", "\u0184", "\u0186", "\u0187", "\u0189", "\u018A", "\u018B", "\u018E", "\u018F", "\u0190", "\u0191", "\u0193", "\u0194", "\u0196", "\u0197", "\u0198", "\u019C", "\u019D", "\u019F", "\u01A0", "\u01A2", "\u01A4", "\u01A6", "\u01A7", "\u01A9", "\u01AC", "\u01AE", "\u01AF", "\u01B1", "\u01B2", "\u01B3", "\u01B5", "\u01B7", "\u01B8", "\u01BC", "\u01C4", "\u01C7", "\u01CA", "\u01CD", "\u01CF", "\u01D1", "\u01D3", "\u01D5", "\u01D7", "\u01D9", "\u01DB", "\u01DE", "\u01E0", "\u01E2", "\u01E4", "\u01E6", "\u01E8", "\u01EA", "\u01EC", "\u01EE", "\u01F1", "\u01F4", "\u01F6", "\u01F7", "\u01F8", "\u01FA", "\u01FC", "\u01FE", "\u0200", "\u0202", "\u0204", "\u0206", "\u0208", "\u020A", "\u020C", "\u020E", "\u0210", "\u0212", "\u0214", "\u0216", "\u0218", "\u021A", "\u021C", "\u021E", "\u0220", "\u0222", "\u0224", "\u0226", "\u0228", "\u022A", "\u022C", "\u022E", "\u0230", "\u0232",